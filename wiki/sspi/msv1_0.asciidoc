ifdef::env-github[]
:note-caption: :pencil2:
endif::[]

= Microsoft Authentication Package v1.0
:toc: macro

The msv1_0 authentication package (AP) supports local machine logons.
It is also the security package (SP) for NTLM challenge-response authentication on a network.

toc::[]

== Functions

The protocol messages that msv1_0 supports is documented on MSDN and included here for conveniencefootnote:[https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/ne-ntsecapi-msv1_0_protocol_message_type[MSV1_0_PROTOCOL_MESSAGE_TYPE enumeration (ntsecapi.h)]]:

[%header]
|===
| Id     | Message Type               | CLI Support        | NT Version | Internal Function
| `0x00` | `Lm20ChallengeRequest`     | :heavy_check_mark: | `>=3.5`    | `MspLm20Challenge`
| `0x01` | `Lm20GetChallengeResponse` | :x:                | `>=3.5`    | `MspLm20GetChallengeResponse`
| `0x02` | `EnumerateUsers`           | :heavy_check_mark: | `>=3.5`    | `MspLm20EnumUsers`
| `0x03` | `GetUserInfo`              | :heavy_check_mark: | `>=3.5`    | `MspLm20GetUserInfo`
| `0x04` | `ReLogonUsers`             | :heavy_minus_sign: | `>=3.5`    | `MspLm20ReLogonUsers`
| `0x05` | `ChangePassword`           | :x:                | `>=3.5`    | `MspLm20ChangePassword`
| `0x06` | `ChangeCachedPassword`     | :heavy_check_mark: | `>=4.0`    | `MspLm20ChangePassword`
| `0x07` | `GenericPassthrough`       | _Planned_          | `>=5.0`    | `MspLm20GenericPassthrough`
| `0x08` | `CacheLogon`               | :heavy_check_mark: | `>=5.0`    | `MspLm20CacheLogon`
| `0x09` | `SubAuth`                  | :x:                | `>=5.0`    | `MspNtSubAuth`
| `0x0A` | `DeriveCredential`         | :heavy_check_mark: | `>=5.0`    | `MspNtDeriveCredential`
| `0x0B` | `CacheLookup`              | :x:                | `>=5.0`    | `MspLm20CacheLookup`
| `0x0C` | `SetProcessOption`         | :heavy_check_mark: | `>=5.1`    | `MspSetProcessOption`
| `0x0D` | `ConfigLocalAliases`       | :x:                | `>=6.0`    | `MspConfigLocalAliases`
| `0x0E` | `ClearCachedCredentials`   | :heavy_check_mark: | `>=6.0`    | `MspLm20ClearCachedCredentials`
| `0x0F` | `LookupToken`              | :x:                | `>=6.1`    | `MspLookupToken`
| `0x10` | `ValidateAuth`             | :x:                | `>=6.2`    | `MspValidateAuth`
| `0x11` | `CacheLookupEx`            | :x:                | `>=6.2`    | `MspLm20CacheLookup`
| `0x12` | `GetCredentialKey`         | :heavy_check_mark: | `>=6.2`    | `MspGetCredentialKey`
| `0x13` | `SetThreadOption`          | :heavy_check_mark: | `>=6.2`    | `MspSetThreadOption`
| `0x14` | `DecryptDpapiMasterKey`    | _Planned_          | `>=6.4`    | `MspDecryptDpapiMasterKey`
| `0x15` | `GetStrongCredentialKey`   | :heavy_check_mark: | `>=6.4`    | `MspGetStrongCredentialKey`
| `0x16` | `TransferCred`             | :heavy_check_mark: | `>=10.0`   | `MspTransferCreds`
| `0x17` | `ProvisionTbal`            | :heavy_check_mark: | `>=10.0`   | `MspProvisionTbal`
| `0x18` | `DeleteTbalSecrets`        | :heavy_check_mark: | `>=10.0`   | `MspDeleteTbalSecrets`
|===

NOTE: The internal function for each message type will be located in `msv1_0.dll`.

=== CacheLogon

This dispatch routine caches logon information in the logon cache.
MSV1_0 will check to make sure the client request came from the same process.

```
msv1_0 CacheLogon --domain {name} --account {name} [--computer name] {--hash {value} | --pass {value}} [--mitlogon {upn}] [--suppcreds {data}] [--delete] [--smartcard]
```

=== CacheLookup

...
For a cached smart card logon the issuer and subject name will be used as the user name and domain name, the credential type will be raw, and the credential data will be the SHA1 hash of the certificate.

```
msv1_0 CacheLookup --account {name} [--domain name] --credtype {name} --cred {ascii hex}
```

=== CacheLookupEx

This dispatch routine looks up the local logon in the cache.
`SeTcbPrivilege` is required.

```
msv1_0 CacheLookupEx ...
```

=== ChangeCachedPassword

This dispatch routine changes a password in the logon cache.
This is used when the password is changed on the domain controller using some other mechanism and the locally cached version needs to be updated to match the new value.
For example, RAS handles changing the passwords on the domain but then needs to update the cached copy so the user can still access servers.
`SeTcbPrivilege` is required if you are changing the cached entry for someone else.

```
msv1_0 ChangeCachedPassword --domain {name} --account {name} --oldpass {password} --newpass {password}
```

=== ChangePassword

Not implemented.
Appears at first to be coercible, but LSASS will impersonate itself and remove the admin (`S-1-5-32-544`) sid before making a connection to another computer.

=== ClearCachedCredentials

Clear the credentials in the local NTLM logon cache.
`SeTcbPrivilege` is required.

```
msv1_0 ClearCachedCredentials
```

=== DecryptDpapiMasterKey

...

```
msv1_0 DecryptDpapiMasterKey ...
```

=== DeleteTbalSecrets

Clear the Trusted Boot Auto-Logon (TBAL) secrets in the System vault.<sup>2</sup>

```
msv1_0 DeleteTbalSecrets
```

=== DeriveCredential

Get the [SHA1 HMAC](https://en.wikipedia.org/wiki/HMAC) for a provided message using an NT OWF or SHA1 OWF password as the key, specified by the logon session id.
The `--sha1v2` argument specifies to use the SHA1 OWF password instead of the NT OWF password.
`SeTcbPrivilege` may be required when specifying an id for another logon session but still need to verify that.

```
msv1_0 DeriveCredential --luid {session id} [--sha1v2] --message {ascii hex}
```

=== EnumerateUsers

Enumerates all interactive, service, and batch logons managed by MSV1_0.
The machine account logon will not be included in the list.

```
msv1_0 EnumerateUsers
```

=== GenericPassthrough

This dispatch routine passes any of the other dispatch routines to the domain controller.
The authentication package on the domain controller may choose to reject certain dispatch requests.

```
msv1_0 -d {function name} [function arguments]...
```

=== GetCredentialKey

Get keys from the primary credential structure for the logon session.
The  primary credential structure may contain an LM OWF hash, NT OWF hash, SHA OWF hash, and a Cred key.

The command will return the SHA OWF hash and the Cred Key if it is present.
If the Cred Key is not present the command will instead return the NT OWF hash.
The command will fail if the user does not have the `SeTcbPrivilege` privilege or credential isolation is enabled.

```
msv1_0 GetCredentialKey --luid {session id}
```

NOTE: The Cred Key is the same key referred to by Mimikatz as "DPAPI" under the "Primary" section of the command output for `sekurlsa::msv`.

=== GetStrongCredentialKey

Get keys from the primary credential structure for the logon session.
Please refer to `GetCredentialKey` for more information about primary credentials.

The command offers two modes of operation.
In the first mode, the primary credential structure for the specified logon session is retrieved.
Additional handling is done in this mode if the structure contains a GMSA credential.
In that situation, the cleartext password for the service account is retrieved, converted to its NT OWF and SHA OWF equivalents, than stored in the primary credential structure.

In the second mode, the user should supply either a cleartext password or NT OWF hash to store in an empty primary credential structure.
If a cleartext password is provided it will be converted to NT OWF and SHA OWF equivalents to store in the primary credential structure.
The second mode requires the user to supply valid data pointers for LSASS process memory which is out of scope for the project.

An account type (e.g., `SID_NAME_USE`) is then determined using either the specified logon session's SID (if using the first mode of the command's operation), otherwise a provided SID is used.
If the account is a group or domain, then the Cred Key (e.g., `DomainUserCredKey`) is returned.
Otherwise, the SHA OWF (e.g., the `LocalUserCredKey`) is returned.

```
msv1_0 GetStrongCredentialKey ...
```

NOTE: The Cred Key is the same key referred to by Mimikatz as "DPAPI" under the "Primary" section of the command output for `sekurlsa::msv`.

=== GetUserInfo

Get information about a session id.

```
msv1_0 GetUserInfo --luid {session id}
```

=== Lm20ChallengeRequest

Get a challenge that may be delivered to a host that initiated an NTLMv2 logon.
Once a challenge response is received, it may be passed to `LsaLogonUser` with a `LogonType` of `MsV1_0Lm20Logon` to complete the logon.

```
msv1_0 Lm20ChallengeRequest
```

=== ProvisionTbal

Provision the Trusted Boot Auto-Logon (TBAL) LSA secrets for a logon session.footnote:[https://www.passcape.com/index.php?section=blog&cmd=details&id=38#a6[What is Trusted Boot Auto-Logon (TBAL)?]]
The host is required to be actively kernel debugged for the function to succeed.

```
msv1_0 ProvisionTbal --luid {session id}
```

=== SetProcessOption

Enable or disable an option for the calling process.
`SeTcbPrivilege` is required.
The currently known set of process options include:

- `AllowBlankPassword`
- `AllowOldPassword`
- `DisableAdminLockout`
- `DisableForceGuest`
- `TryCacheFirst`

MSV1_0 may internally check for one these options using `NtLmCheckProcessOption`.

```
msv1_0 SetProcessOption --option {process option} [--disable]
```

=== SetThreadOption

Enable or disable an option for the calling thread.
The set of options are the same as with the `SetProcessOption` command but they will take precedence over process options.
`SeTcbPrivilege` is required.

```
msv1_0 SetThreadOption --option {thread option} [--disable]
```

=== TransferCred

Transfer data between two msv1_0 logon sessions.
The specific data that is transferred and privileges that may be required are still being determined.
The function will ignore any flags that are provided.

```
msv1_0 TransferCred --sluid {session id} --dluid {session id}
```

== Sub-authentication Packages

Msv1_0 supports registering custom sub-authentication packages for extra user validation for local logons.
The only Micosoft developed sub-authentication package that could be identified was the "Microsoft IIS sub-authenticiation handler" implemented in the file `iissuba.dll`.
The `iissuba.dll` package has not shipped with Windows for a long time - hence it has not been included in the LSA Whisperer project.